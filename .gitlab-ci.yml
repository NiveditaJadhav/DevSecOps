stages:
  - build
  - init
  - validate
  - plan
  - apply
  - test
  - scan
  - deploy

# Build stage: Build the Docker image
build:
  stage: build
  script:
    - echo "Building image..."

# Terraform Initialization
terraform_init:
  stage: init
  image: niveditaj1/devsecops:latest
  script:
    - apt-get update && apt-get install -y curl unzip
    - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
    - unzip terraform.zip
    - mv terraform /usr/local/bin/
    - terraform init

terraform_validate:
  stage: validate
  image: niveditaj1/devsecops:latest
  script:
    - apt-get update && apt-get install -y curl unzip
    - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
    - unzip terraform.zip
    - mv terraform /usr/local/bin/
    - terraform init  # <-- This is the missing step
    - terraform validate
terraform_plan:
  stage: plan
  image: niveditaj1/devsecops:latest
  script:
    - apt-get update && apt-get install -y curl unzip
    - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
    - unzip terraform.zip
    - mv terraform /usr/local/bin/
    - terraform init  # <-- Initialize Terraform before running any commands
    - terraform plan

# SonarCloud Job
sonarcloud_check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - master
    - main

# ZAP Dynamic Security Test Job
zap_scan:
  stage: test
  image: openjdk:17-slim
  script:
    # Install required dependencies
    - apt-get update && apt-get install -y curl unzip
    - echo "Downloading ZAP..."
    # Download the ZAP tar file
    - curl -L https://github.com/zaproxy/zaproxy/releases/download/v2.15.0/ZAP_2.15.0_linux.tar.gz -o zap.tar.gz
    - tar -xzf zap.tar.gz
    - cd ZAP_2.15.0
    - echo "Starting ZAP in daemon mode..."
    # Run ZAP in daemon mode
    - java -jar zap-2.15.0.jar -daemon -port 9090 -host 0.0.0.0 -config api.disablekey=true &
    - echo "Waiting for ZAP to start..."
    - |
      timeout=60
      counter=0
      while ! curl -s http://localhost:9090/JSON/core/view/version > /dev/null && [ $counter -lt $timeout ]; do
        echo "Waiting for ZAP to start... ($counter seconds)"
        sleep 5
        counter=$((counter+5))
      done
    - if [ $counter -ge $timeout ]; then echo "ZAP failed to start"; exit 1; fi
    - echo "Running security scan..."
    - curl -X POST "http://localhost:9090/JSON/ascan/action/scan/?url=http://localhost:3000/&recurse=true&inScopeOnly=true"
    - echo "Downloading HTML report..."
    - curl -X GET "http://localhost:9090/OTHER/core/other/htmlreport/" -o zap_report.html
    - mv zap_report.html ../zap_report.html
    - cd ..
    - if [ ! -s zap_report.html ]; then
        echo "ZAP report is empty! Check the ZAP configuration or scan results.";
        exit 1;
      fi
  artifacts:
    paths:
      - zap_report.html

trivy_scan:
  stage: scan
  image: aquasec/trivy:latest
  script:
    - trivy image niveditaj1/devsecops:latest


# Deployment Stage
deploy:
  stage: deploy
  script:
    - echo "Deploying application..."
  only:
    - master
    - main
