stages:
  - build
    - setup
  - security_scan
  - init
  - validate
  - plan
  - apply
  - test
  - deploy


variables:
  TRIVY_VERSION: ""

before_script:
  - echo "Checking OS..."
  - cat /etc/os-release
  - echo "Installing dependencies..."
  - apt-get update && apt-get install -y jq curl iputils-ping

# Build stage: Build the Docker image
build:
  stage: build
  script:
    - echo "Building image..."
stages:
  - setup
  - security_scan

setup_trivy:
  stage: setup
  script:
    - echo "Checking connectivity..."
    - ping -c 3 github.com || { echo "Cannot reach GitHub!"; exit 1; }

    # Fetch the latest Trivy version
    - export TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | jq -r ".tag_name" | sed 's/v//')

    # Validate if TRIVY_VERSION is retrieved
    - if [ -z "$TRIVY_VERSION" ]; then echo "Failed to fetch Trivy version!"; exit 1; fi
    - echo "Latest Trivy version: $TRIVY_VERSION"

    # Detect system architecture
    - export ARCH=$(uname -m)
    - if [ "$ARCH" = "x86_64" ]; then ARCH="64bit"; fi
    - if [ "$ARCH" = "aarch64" ]; then ARCH="ARM64"; fi
    - echo "Detected Architecture: $ARCH"

    # Construct Trivy download URL
    - export TRIVY_URL="https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_Linux-${ARCH}.tar.gz"
    - echo "Downloading Trivy from: $TRIVY_URL"

    # Download Trivy and validate success
    - curl -fsSL -o trivy.tar.gz "$TRIVY_URL" || { echo "Failed to download Trivy!"; exit 1; }

    # Extract and install Trivy
    - tar -xzf trivy.tar.gz
    - chmod +x trivy
    - mv trivy /usr/local/bin/

    # Verify installation
    - trivy --version
    - echo "Trivy installation completed successfully!"

  artifacts:
    paths:
      - /usr/local/bin/trivy
    expire_in: 1 hour

security_scan:
  stage: security_scan
  script:
    - echo "Running security scan with Trivy..."
    - trivy fs . || { echo "Trivy scan failed!"; exit 1; }

  dependencies:
    - setup_trivy


# Terraform Initialization
terraform_init:
  stage: init
  image: niveditaj1/devsecops:latest
  script:
    - apt-get update && apt-get install -y curl unzip
    - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
    - unzip terraform.zip
    - mv terraform /usr/local/bin/
    - terraform init

terraform_validate:
  stage: validate
  image: niveditaj1/devsecops:latest
  script:
    - apt-get update && apt-get install -y curl unzip
    - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
    - unzip terraform.zip
    - mv terraform /usr/local/bin/
    - terraform init  # <-- This is the missing step
    - terraform validate
terraform_plan:
  stage: plan
  image: niveditaj1/devsecops:latest
  script:
    - apt-get update && apt-get install -y curl unzip
    - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
    - unzip terraform.zip
    - mv terraform /usr/local/bin/
    - terraform init  # <-- Initialize Terraform before running any commands
    - terraform plan

# SonarCloud Job
sonarcloud_check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - master
    - main

# ZAP Dynamic Security Test Job
zap_scan:
  stage: test
  image: openjdk:17-slim
  script:
    # Install required dependencies
    - apt-get update && apt-get install -y curl unzip
    - echo "Downloading ZAP..."
    # Download the ZAP tar file
    - curl -L https://github.com/zaproxy/zaproxy/releases/download/v2.15.0/ZAP_2.15.0_linux.tar.gz -o zap.tar.gz
    - tar -xzf zap.tar.gz
    - cd ZAP_2.15.0
    - echo "Starting ZAP in daemon mode..."
    # Run ZAP in daemon mode
    - java -jar zap-2.15.0.jar -daemon -port 9090 -host 0.0.0.0 -config api.disablekey=true &
    - echo "Waiting for ZAP to start..."
    - |
      timeout=60
      counter=0
      while ! curl -s http://localhost:9090/JSON/core/view/version > /dev/null && [ $counter -lt $timeout ]; do
        echo "Waiting for ZAP to start... ($counter seconds)"
        sleep 5
        counter=$((counter+5))
      done
    - if [ $counter -ge $timeout ]; then echo "ZAP failed to start"; exit 1; fi
    - echo "Running security scan..."
    - curl -X POST "http://localhost:9090/JSON/ascan/action/scan/?url=http://localhost:3000/&recurse=true&inScopeOnly=true"
    - echo "Downloading HTML report..."
    - curl -X GET "http://localhost:9090/OTHER/core/other/htmlreport/" -o zap_report.html
    - mv zap_report.html ../zap_report.html
    - cd ..
    - if [ ! -s zap_report.html ]; then
        echo "ZAP report is empty! Check the ZAP configuration or scan results.";
        exit 1;
      fi
  artifacts:
    paths:

      - zap_report.html


deploy:
  stage: deploy
  script:
    - echo "Deploying application..."
  only:
    - master
    - main
